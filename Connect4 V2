using System;

namespace Connect4_FinalProject_KACHOW;

// HOW I WANT TO  DO IT HAAAAAAAAAAAAAAAAAAAAAA
// (ABSTRACT) GAME CLASS |
// ----------------------
// + Start (): Void 
// + PlayTurno (): void
// + IsGameOver (): bool 
// + GetWinner (): string
// 
// ConnectFourGame CLASS |
// ----------------------
//  - Board: board
//  - Players: Player[] 
//  - CurrentPlayer : Player
//  - turnCounter: int
// ----------------------
//  + Start(): void 
//  + PlayTurn(): void
//  + IsGameOver(): bool
//  + GetWinner(): string
//  - SwitchPlayers():void
//
//  Board CLASS |
// -----------------
//  - grid: Cell[,]
// ----------------- 
//  + Initialize (): void
//  + DropPiece(col,sym): bool
//  + Display(): void
//  + CheckWin(sym): bool 
//  + IsFull(): bool
//
//  Cell CLASS |
//--------------
//  - symbol: char
// ----------------
//  + GetSymbol(): char
//  + SetSymbol(c): void
//
//  (ABSTRACT) Player CLASS |  
//-------------------------
//  #name : string
//  # symbol: char
//--------------------------
//  + GetMove(board): int
//  + Name {get; set;}
//  + Symbol {get; set;}
//
//  HumanPlayer CLASS |
//--------------------
//  + GetMove(board): int

public class Menu
{
    public static GameSetup? ShowMainMenu()
    {
        while (true)
        {
            Console.Clear();
            Console.WriteLine(@" 
      ____                            _     _  _      ____                      
     / ___|___  _ __  _ __   ___  ___| |_  | || |    / ___| __ _ _ __ ___   ___ 
    | |   / _ \| '_ \| '_ \ / _ \/ __| __| | || |_  | |  _ / _` | '_ ` _ \ / _ \
    | |__| (_) | | | | | | |  __/ (__| |_  |__   _| | |_| | (_| | | | | | |  __/
     \____\___/|_| |_|_| |_|\___|\___|\__|    |_|    \____|\__,_|_| |_| |_|\___|
    ");
            Console.WriteLine("Welcome to Connect Four!! :D");
            Console.WriteLine("1) Single Player");
            Console.WriteLine("2) Two Player");
            Console.WriteLine("3) Exit\n");

            string choice = Console.ReadLine();
            if (choice == "3") return null;  // Exit the game

            string gameMode = GetGameMode();
            string player1Name = GetPlayerName("Player 1");

            string player2Name;
            bool singlePlayer = (choice == "1");
            if (singlePlayer)
            {
                player2Name = "Computer";
            }
            else
            {
                player2Name = GetPlayerName("Player 2");
            }

            Console.WriteLine(
                $"\nStarting a {(gameMode == "Quick" ? "Quick Game" : "Best-of-Three")} as " +
                $"{(singlePlayer ? "Single Player" : "Two Player")}:\n" +
                $"Player 1: {player1Name}\nPlayer 2: {player2Name}");
            Console.WriteLine("\nPress any key to continue...");
            Console.ReadKey();

            // Return the game setup instead of looping infinitely
            return new GameSetup(
                singlePlayer,
                gameMode == "Best-of-Three",
                player1Name,
                player2Name
            );
        }
    }
    public class GameSetup
    {
        public bool SinglePlayer { get; }
        public bool BestOfThree { get; }
        public string Player1Name { get; }
        public string Player2Name { get; }

        public GameSetup(bool singlePlayer, bool bestOfThree, string p1, string p2)
        {
            SinglePlayer = singlePlayer;
            BestOfThree = bestOfThree;
            Player1Name = p1;
            Player2Name = p2;
        }
    }

    private static string GetGameMode()
    {
        while (true)
        {
            Console.Clear();
            Console.WriteLine("=== SELECT GAME MODE ===\n");
            Console.WriteLine("1) Quick Game");
            Console.WriteLine("2) Best-of-Three\n");

            string mode = Console.ReadLine();
            if (mode == "1") return "Quick";
            if (mode == "2") return "Best-of-Three";
            Console.WriteLine("Invalid option. Press any key to try again.");
            Console.ReadKey();
        }
    }

    private static string GetPlayerName(string playerPrompt)
    {
        while (true)
        {
            Console.Write($"{playerPrompt} - Enter name (max 10 chars): ");
            string name = Console.ReadLine().Trim();

            if (name.Length > 10)
            {
                string trimmed = name.Substring(0, 10);
                Console.Write($"That is too long. Would you like to trim to '{trimmed}'? (y/n): ");
                string ans = Console.ReadLine().ToLower();
                if (ans == "y") return trimmed;
                else continue; // ask again
            }
            if (string.IsNullOrWhiteSpace(name))
            {
                Console.WriteLine("Name cannot be empty!");
                continue;
            }
            return name;
        }
    }
}

public class Board
{
    private const int Rows = 6;
    private const int Columns = 7;
    private char[,] Grid = new char[Rows, Columns];


    public char GetCell(int row, int col)
    {
        if (row < 0 || row >= Rows || col < 0 || col >= Columns)
            return '\0';
        return Grid[row, col];
    }

    // this method fills the board with space ' ' to start the game clean

    public void Initialize()// this Method will call at the beginning of the game 
    {
        for (int row = 0; row < Rows; row++)
        {
            for (int col = 0; col < Columns; col++)
            {
                Grid[row, col] = ' '; // grid is a 2D array 
            }
        }

    }

    // this part will be the display the visual game

    public void Display()
    {
        {
            Console.WriteLine();
            Console.WriteLine("   CONNECT FOUR");
            Console.WriteLine();

            for (int row = 0; row < 6; row++)
            {
                Console.Write(" | ");
                for (int col = 0; col < 7; col++)
                {
                    Console.Write(Grid[row, col]);
                    Console.Write(" | ");
                }
                Console.WriteLine();
            }

            Console.WriteLine(" -----------------------------");
            Console.WriteLine("   1   2   3   4   5   6   7\n");
        }
    }

    // Check if a column can accept a new piece
    public bool CanDropPiece(int column)
    {
        column -= 1;
        if (column < 0 || column >= Columns) return false;
        return Grid[0, column] == ' ';
    }

    // Place a piece without validation
    public void SimulateDropPiece(int column, char symbol)
    {
        column -= 1;
        for (int row = Rows - 1; row >= 0; row--)
        {
            if (Grid[row, column] == ' ')
            {
                Grid[row, column] = symbol;
                return;
            }
        }
    }

    // Remove topmost piece from column
    public void UndoDropPiece(int column)
    {
        column -= 1;
        for (int row = 0; row < Rows; row++)
        {
            if (Grid[row, column] != ' ')
            {
                Grid[row, column] = ' ';
                return;
            }
        }
    }

    //  this method will be the drop a piece into a Column 

    public bool DropPiece(int column, char symbol) // bool because need to check true or false of position 
    {
        column -= 1; // adjust for 0 based array 

        if (column < 0 || column >= Columns)

            return false;

        for (int row = Rows - 1; row >= 0; row--)
        {
            if (Grid[row, column] == ' ')
            {
                Grid[row, column] = symbol;

                return true;
            }
        }

        return false; // column is full 
    }

    // this part will check if the board is full "tie" 

    public bool IsFull()
    {
        for (int col = 0; col < Columns; col++)
        {
            if (Grid[0, col] == ' ')

                return false;
        }

        return true;
    }

    //This part will check the directions 4 in row 

    public bool CheckWin(char symbol)
    {
        // this is horizontal check
        for (int row = 0; row < Rows; row++)
        {
            for (int col = 0; col <= Columns - 4; col++)
            {
                if (Grid[row, col] == symbol && Grid[row, col + 1] == symbol & Grid[row, col + 2] == symbol && Grid[row, col + 3] == symbol)
                    return true;
            }
        }

        // this is vertical check

        for (int col = 0; col < Columns; col++)
        {
            for (int row = 0; row <= Rows - 4; row++)
            {
                if (Grid[row, col] == symbol && Grid[row + 1, col] == symbol & Grid[row + 2, col] == symbol && Grid[row + 3, col] == symbol)
                    return true;
            }
        }

        // this part is diagonal (down-right)

        for (int row = 0; row <= Rows - 4; row++)
        {
            for (int col = 0; col <= Columns - 4; col++)
            {
                if (Grid[row, col] == symbol && Grid[row + 1, col + 1] == symbol & Grid[row + 2, col + 2] == symbol && Grid[row + 3, col + 3] == symbol)
                    return true;
            }
        }

        // this is the other diagonal up-right

        for (int row = 3; row < Rows; row++)
        {
            for (int col = 0; col <= Columns - 4; col++)
            {
                if (Grid[row, col] == symbol && Grid[row - 1, col + 1] == symbol & Grid[row - 2, col + 2] == symbol && Grid[row - 3, col + 3] == symbol)
                    return true;

            }
        }

        return false;
    }

}

public abstract class Player
{
    public string Name { get; set; }
    public char Symbol { get; set; } // 'X' OR 'O'

    public Player(string name, char symbol)
    {
        Name = name;
        Symbol = symbol;
    }
    public abstract int GetMove(Board board); //each player type can give their own logic for choosing a column
}

public class HumanPlayer : Player
{
    public HumanPlayer(string name, char symbol) : base(name, symbol)
    {

    }

    public override int GetMove(Board board)
    {
        int column;

        while (true)
        {
            Console.Write($"{Name} ({Symbol}), choose a column (1-7): ");
            string input = Console.ReadLine();

            if (int.TryParse(input, out column) && column >= 1 && column <= 7)
            {
                return column;
            }

            Console.WriteLine("Invalid input.Please enter a number from 1 to 7.");
        }

    }
}

public class ComputerPlayer : Player
{
    private Random rnd = new Random();

    public ComputerPlayer(string name, char symbol) : base(name, symbol) { }

    public override int GetMove(Board board)
    {
        Console.WriteLine($"{Name} is thinking...");
        Thread.Sleep(800); // Human-like delay

        // 1) First priority: Check if computer can win immediately
        int? winningMove = FindWinningMove(board, this.Symbol);
        if (winningMove != null)
        {
            Console.WriteLine($"{Name} sees a winning move!");
            return winningMove.Value;
        }

        // 2) Second priority: Block opponent from winning
        char opponentSymbol = (this.Symbol == 'X') ? 'O' : 'X';
        int? blockingMove = FindWinningMove(board, opponentSymbol);
        if (blockingMove != null)
        {
            Console.WriteLine($"{Name} blocks opponent's winning move!");
            return blockingMove.Value;
        }

        // 3) Try to create potential winning opportunities
        int? strategicMove = FindStrategicMove(board);
        if (strategicMove != null)
        {
            return strategicMove.Value;
        }

        // 4) Default: Choose a random valid column
        return GetRandomMove(board);
    }

    private int? FindWinningMove(Board board, char symbol)
    {
        // Check all columns for an immediate win
        for (int col = 1; col <= 7; col++)
        {
            if (board.CanDropPiece(col))
            {
                board.SimulateDropPiece(col, symbol);
                bool isWin = board.CheckWin(symbol);
                board.UndoDropPiece(col);

                if (isWin)
                {
                    return col;
                }
            }
        }
        return null;
    }

    private int? FindStrategicMove(Board board)
    {
        // Prefer center column (better strategic position)
        if (board.CanDropPiece(4))
        {
            return 4;
        }

        // Look for opportunities to create 3 in a row
        for (int col = 1; col <= 7; col++)
        {
            if (board.CanDropPiece(col))
            {
                board.SimulateDropPiece(col, this.Symbol);
                bool createsOpportunity = CheckForPotentialWin(board, this.Symbol, 3);
                board.UndoDropPiece(col);

                if (createsOpportunity)
                {
                    return col;
                }
            }
        }

        // Look to block opponent's potential 3 in a row
        char opponentSymbol = (this.Symbol == 'X') ? 'O' : 'X';
        for (int col = 1; col <= 7; col++)
        {
            if (board.CanDropPiece(col))
            {
                board.SimulateDropPiece(col, opponentSymbol);
                bool blocksOpportunity = CheckForPotentialWin(board, opponentSymbol, 3);
                board.UndoDropPiece(col);

                if (blocksOpportunity)
                {
                    return col;
                }
            }
        }

        return null;
    }

    private bool CheckForPotentialWin(Board board, char symbol, int requiredCount)
    {
        // Simplified check for potential winning sequences
        for (int row = 0; row < 6; row++)
        {
            for (int col = 0; col <= 7 - requiredCount; col++)
            {
                int count = 0;
                bool hasSpace = false;

                for (int i = 0; i < requiredCount + 1; i++)
                {
                    if (col + i >= 7) break;

                    char cell = board.GetCell(row, col + i);
                    if (cell == symbol) count++;
                    else if (cell == ' ') hasSpace = true;
                    else break;
                }

                if (count >= requiredCount && hasSpace) return true;
            }
        }
        return false;
    }

    private int GetRandomMove(Board board)
    {
        List<int> validColumns = new List<int>();
        for (int col = 1; col <= 7; col++)
        {
            if (board.CanDropPiece(col))
            {
                validColumns.Add(col);
            }
        }

        if (validColumns.Count == 0) return 1; // fallback

        // Prefer center columns when choosing randomly
        if (validColumns.Contains(4)) return 4;
        if (validColumns.Contains(3)) return 3;
        if (validColumns.Contains(5)) return 5;

        return validColumns[rnd.Next(validColumns.Count)];
    }
}


// This is the "Guide" for what every game needs to do 
public abstract class Game
{
    public abstract void StartGame();
    public abstract void PlayTurn();
    public abstract bool IsGameOver();
    public abstract string GetWinner();
}

//This is the type of Game 

    public class ConnectFourGame : Game
    {
        public Board Board { get; set; }
        public Player[] Players { get; set; }
        public Player CurrentPlayer { get; set; }
        public int TurnCounter { get; set; }

        public bool SeriesForfeit { get; private set; } = false;
        private bool RoundForfeited = false;
        private int Player1Score = 0;
        private int Player2Score = 0;
        private bool BestOfThree;
        private bool SinglePlayer;

        // NEW: Track the player who last successfully played a move
        private Player LastMovePlayer = null;

        public ConnectFourGame(bool singlePlayer, bool bestOfThree, string p1Name, string p2Name)
        {
            Board = new Board();
            Players = new Player[2];
            SinglePlayer = singlePlayer;
            BestOfThree = bestOfThree;
            Players[0] = new HumanPlayer(p1Name, 'X');
            Players[1] = singlePlayer ? new ComputerPlayer(p2Name, 'O') : new HumanPlayer(p2Name, 'O');
            CurrentPlayer = Players[0];
            TurnCounter = 0;
        }

        private void AwardPoint(Player winner)
        {
            if (winner == Players[0]) Player1Score++;
            else Player2Score++;
        }

        private void DisplayCurrentScore()
        {
            Console.WriteLine($"Score: {Players[0].Name}={Player1Score}, {Players[1].Name}={Player2Score}");
        }

        private void ShowFinalSeriesWinner()
        {
            if (Player1Score > Player2Score)
                Console.WriteLine($"Congratulations {Players[0].Name}, you won the series!");
            else if (Player2Score > Player1Score)
                Console.WriteLine($"Congratulations {Players[1].Name}, you won the series!");
            else
                Console.WriteLine("The series ended in a tie!");
        }

        public override void StartGame()
        {
            int roundsToPlay = BestOfThree ? 3 : 1;
            Player1Score = 0;
            Player2Score = 0;

            for (int round = 1; round <= roundsToPlay && Player1Score < 2 && Player2Score < 2; round++)
            {
                Board.Initialize();
                TurnCounter = 0;
                CurrentPlayer = Players[0];
                LastMovePlayer = null;
                SeriesForfeit = false;
                RoundForfeited = false;

                Console.Clear();
                Console.WriteLine($"=== Round {round} ===");

                while (!IsGameOver() && !RoundForfeited && !SeriesForfeit)
                {
                    PlayTurn();
                }

                if (SeriesForfeit) break;

                if (RoundForfeited)
                {
                    var winner = (CurrentPlayer == Players[0]) ? Players[1] : Players[0];
                    AwardPoint(winner);
                    Console.WriteLine($"{winner.Name} wins this round by forfeit.");
                }
                else
                {
                    var winnerName = GetWinner();
                    if (winnerName == "Tie")
                        Console.WriteLine("Round is a tie!");
                    else
                    {
                        var winner = Players[0].Name == winnerName ? Players[0] : Players[1];
                        AwardPoint(winner);
                        Console.WriteLine($"{winner.Name} wins this round!");
                    }
                }

                DisplayCurrentScore();
                Console.WriteLine("\nPress any key to continue...");
                Console.ReadKey();
            }

            ShowFinalSeriesWinner();
        }

    public override void PlayTurn()
    {
        SeriesForfeit = false;
        RoundForfeited = false;

        Console.Clear();
        Board.Display();

        // Handle computer player automatically
        if (CurrentPlayer is ComputerPlayer computerPlayer)
        {
            int computerColumn = computerPlayer.GetMove(Board);  // Changed variable name
            Board.DropPiece(computerColumn, CurrentPlayer.Symbol);
            LastMovePlayer = CurrentPlayer;
            TurnCounter++;
            if (!IsGameOver()) SwitchPlayers();
            return;
        }

        // Human player's turn
        Console.WriteLine(
            $"\n{CurrentPlayer.Name} ({CurrentPlayer.Symbol}), choose column (1-7), 'f' forfeit round, or 'ff' forfeit series:");
        string input = Console.ReadLine().Trim().ToLower();

        if (input == "f")
        {
            RoundForfeited = true;
            return;
        }
        if (input == "ff")
        {
            SeriesForfeit = true;
            RoundForfeited = true;
            return;
        }

        if (int.TryParse(input, out int playerColumn) && playerColumn >= 1 && playerColumn <= 7)  // Changed variable name
        {
            if (Board.DropPiece(playerColumn, CurrentPlayer.Symbol))
            {
                LastMovePlayer = CurrentPlayer;
                TurnCounter++;
                if (!IsGameOver()) SwitchPlayers();
            }
            else
            {
                Console.WriteLine("That column is full. Press any key to try again.");
                Console.ReadKey();
            }
        }
        else
        {
            Console.WriteLine("Invalid input. Enter a number between 1-7, or 'f'/'ff'.");
            Console.ReadKey();
        }
    }

    public override bool IsGameOver() =>
            LastMovePlayer != null && (Board.CheckWin(LastMovePlayer.Symbol) || Board.IsFull());

        public override string GetWinner() =>
            LastMovePlayer != null && Board.CheckWin(LastMovePlayer.Symbol) ? LastMovePlayer.Name : "Tie";

        private void SwitchPlayers() => CurrentPlayer = (CurrentPlayer == Players[0]) ? Players[1] : Players[0];
    }

    class Program
{
    static void Main(string[] args)
    {
        while (true)
        {
            var setup = Menu.ShowMainMenu();
            if (setup == null) break; // User chose Exit

            var game = new ConnectFourGame(
                setup.SinglePlayer,
                setup.BestOfThree,
                setup.Player1Name,
                setup.Player2Name
            );

            game.StartGame();

            Console.WriteLine("\nPress any key to return to main menu...");
            Console.ReadKey();
        }

        Console.WriteLine("Thanks for playing :D!");
    }
}



